library(Boruta)
library(caret)
library(raster)
library(dismo)
library(openxlsx)
setwd("D:/00RCode/Result/Data Sumatera/")
file =read_excel("FRCI_Line_6.xlsx")
head(file)
library(dbscan)
library(readxl)
library(dplyr)
library(e1071)
library(Boruta)
library(caret)
library(raster)
library(dismo)
library(openxlsx)
r2 <- 0
n <- 0
while (r2 <= 0.8) {
# setwd("C:/Users/user/Dropbox/FORESTS2020/00AllData/Dataframe Sumatra/Data FRCI Window Area_Malta/")
setwd("D:/00RCode/Result/Data Sumatera/")
file = read_excel("FRCI_Line_6.xlsx")
# file =read.csv("FRCI_Line_6.csv")
head(file)
dataall <- file[,-c(3,10)] ## Drop column Band_1 and Band_9 in dataframe
data<-file[,-c(3,10)] ## Drop column Band_1 and Band_9 in dataframe
head(data)
number <- data %>% group_by(Class) %>% summarize(n())
sample <- data %>% group_by(Class) %>% sample_n(min(number$`n()`))
head(sample)
sample<-sample[-2] ## For remove column Class
res <- dbscan(sample, eps =0.05 , minPts = 5)
res
pairs(sample, col = res$cluster + 1L)
sample$cluster<-res$cluster
cleanall<-sample %>% filter(cluster > 0)
par(mfrow=c(1,2))
#plot(cleanall$Band_4, cleanall$frci)
#plot(sample$Band_4, sample$frci)
svrdata <- cleanall
svrdata <- cleanall[-8]
head(svrdata)
#library(Boruta)
# Decide if a variable is important or not using Boruta
boruta_output <- Boruta(frci ~ ., data=na.omit(svrdata), doTrace=2)  # perform Boruta search
boruta_signif <- names(boruta_output$finalDecision[boruta_output$finalDecision %in% ("Confirmed")])  # collect Confirmed and Tentative variables
print(boruta_signif)  # significant variables
#plot(boruta_output, cex.axis=.7, las=2, xlab="", main="Variable Importance")  # plot variable importance
# Divide data to training and testing ===============================
set.seed(3033)
intrain <- createDataPartition(y = svrdata$frci, p= 0.7, list = FALSE)
training <- svrdata[intrain,]
testing <- svrdata[-intrain,]
dim(training)
dim(testing)
anyNA(svrdata)
## RMSE
rmse <- function(error){
sqrt(mean(error^2))
}
# svr model ==============================================
model <- svm(frci ~ . , training)
predictedY <- predict(model, testing)
error <- testing$frci - predictedY  #
svrPredictionRMSE <- rmse(error)  #
tuneResult <- tune(svm, frci ~ .,  data = training, ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
# tuneResult <- tune(svm, frci ~ .,  data = training,
#                    ranges = list(epsilon = 0.01, cost = 10))
# print(tuneResult)
# plot(tuneResult)
tunedModel <- tuneResult$best.model
tunedModelY <- predict(tunedModel, testing)
error <- testing$frci - tunedModelY
tunedModelRMSE <- rmse(error)  # 2.219642
# 1. 'Actual' and 'Predicted' data
df <- data.frame(testing$frci, tunedModelY)
# 2. R2 Score components
# 2.1. Average of actual data
avr_y_actual <- mean(df$testing.frci)
# 2.2. Total sum of squares
ss_total <- sum((df$testing.frci - avr_y_actual)^2)
# 2.3. Regression sum of squares
ss_regression <- sum((df$tunedModelY - avr_y_actual)^2)
# 2.4. Residual sum of squares
ss_residuals <- sum((df$testing.frci - df$tunedModelY)^2)
# 3. R2 Score
r2 <- 1 - ss_residuals / ss_total
print(r2)
n <- n +1
setwd("D:/00RCode/Result/Data Sumatera/Data Sumatera No_Normalize/")
filename = sprintf("%f %d Sumatera_Line_6.csv", r2,n)
# write.xlsx(cleanall, file = filename)
write.csv(cleanall, file = filename)
## Feature Selection
r2 <- r2 +0.1
}
library(dbscan)
library(readxl)
library(dplyr)
library(e1071)
library(Boruta)
library(caret)
library(raster)
library(dismo)
library(openxlsx)
r2 <- 0
n <- 0
while (r2 <= 0.8) {
# setwd("C:/Users/user/Dropbox/FORESTS2020/00AllData/Dataframe Sumatra/Data FRCI Window Area_Malta/")
setwd("D:/00RCode/Result/Data Sumatera/")
file = read_excel("FRCI_Line_6.xlsx")
# file =read.csv("FRCI_Line_6.csv")
head(file)
dataall <- file[,-c(3,10)] ## Drop column Band_1 and Band_9 in dataframe
data<-file[,-c(3,10)] ## Drop column Band_1 and Band_9 in dataframe
head(data)
number <- data %>% group_by(Class) %>% summarize(n())
sample <- data %>% group_by(Class) %>% sample_n(min(number$`n()`))
head(sample)
sample<-sample[-2] ## For remove column Class
lst <- as.data.frame(lapply(sample, function(x) round(x, 3)))
head(lst)
dataSample<- lst
head(dataSample)
kNNdistplot(dataSample, k = 5)
abline(h=0.05, col = "red", lty=2)
res <- dbscan(sample, eps =0.05 , minPts = 5)
res
pairs(sample, col = res$cluster + 1L)
sample$cluster<-res$cluster
cleanall<-sample %>% filter(cluster > 0)
par(mfrow=c(1,2))
#plot(cleanall$Band_4, cleanall$frci)
#plot(sample$Band_4, sample$frci)
svrdata <- cleanall
svrdata <- cleanall[-8]
head(svrdata)
#library(Boruta)
# Decide if a variable is important or not using Boruta
boruta_output <- Boruta(frci ~ ., data=na.omit(svrdata), doTrace=2)  # perform Boruta search
boruta_signif <- names(boruta_output$finalDecision[boruta_output$finalDecision %in% ("Confirmed")])  # collect Confirmed and Tentative variables
print(boruta_signif)  # significant variables
#plot(boruta_output, cex.axis=.7, las=2, xlab="", main="Variable Importance")  # plot variable importance
# Divide data to training and testing ===============================
set.seed(3033)
intrain <- createDataPartition(y = svrdata$frci, p= 0.7, list = FALSE)
training <- svrdata[intrain,]
testing <- svrdata[-intrain,]
dim(training)
dim(testing)
anyNA(svrdata)
## RMSE
rmse <- function(error){
sqrt(mean(error^2))
}
# svr model ==============================================
model <- svm(frci ~ . , training)
predictedY <- predict(model, testing)
error <- testing$frci - predictedY  #
svrPredictionRMSE <- rmse(error)  #
tuneResult <- tune(svm, frci ~ .,  data = training, ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
# tuneResult <- tune(svm, frci ~ .,  data = training,
#                    ranges = list(epsilon = 0.01, cost = 10))
# print(tuneResult)
# plot(tuneResult)
tunedModel <- tuneResult$best.model
tunedModelY <- predict(tunedModel, testing)
error <- testing$frci - tunedModelY
tunedModelRMSE <- rmse(error)  # 2.219642
# 1. 'Actual' and 'Predicted' data
df <- data.frame(testing$frci, tunedModelY)
# 2. R2 Score components
# 2.1. Average of actual data
avr_y_actual <- mean(df$testing.frci)
# 2.2. Total sum of squares
ss_total <- sum((df$testing.frci - avr_y_actual)^2)
# 2.3. Regression sum of squares
ss_regression <- sum((df$tunedModelY - avr_y_actual)^2)
# 2.4. Residual sum of squares
ss_residuals <- sum((df$testing.frci - df$tunedModelY)^2)
# 3. R2 Score
r2 <- 1 - ss_residuals / ss_total
print(r2)
n <- n + 1
setwd("D:/00RCode/Result/Data Sumatera/Data Sumatera No_Normalize/")
filename = sprintf("%f %d Sumatera_Line_6.csv", r2, n)
# write.xlsx(cleanall, file = filename)
write.csv(cleanall, file = filename)
## Feature Selection
r2 <- r2 + 0.1
}
library(dbscan)
library(readxl)
library(dplyr)
library(e1071)
library(Boruta)
library(caret)
library(raster)
library(dismo)
library(openxlsx)
# setwd("C:/Users/user/Dropbox/FORESTS2020/00AllData/Dataframe Sumatra/Data FRCI Window Area_Malta/")
setwd("D:/00RCode/Result/Data Sumatera/")
file = read_excel("FRCI_Line_6.xlsx")
# file =read.csv("FRCI_Line_6.csv")
head(file)
dataall <- file[,-c(3,10)] ## Drop column Band_1 and Band_9 in dataframe
data<-file[,-c(3,10)] ## Drop column Band_1 and Band_9 in dataframe
head(data)
number <-data %>%
group_by(Class) %>%
summarize(n())
sample <-data%>%
group_by(Class)%>%
sample_n(min(number$`n()`))
head(sample)
sample<-sample[-2] ## For remove column Class
head(sample)
# lst <- as.data.frame(lapply(sample, function(x) round((x-min(x))/(max(x)-min(x)), 3)))
lst <- as.data.frame(lapply(sample, function(x) round(x, 3)))
head(lst)
dataSample <- lst
head(dataSample)
kNNdistplot(dataSample, k = 5)
abline(h=0.05, col = "red", lty=2) #----------------- Note
res <- dbscan(dataSample, eps =0.05 , minPts = 5)
res
pairs(dataSample, col = res$cluster + 1L)
dataSample$cluster<-res$cluster
cleanall<-dataSample %>% filter(cluster > 0)
par(mfrow=c(1,2))
plot(cleanall$Band_4, cleanall$frci)
plot(dataSample$Band_4, dataSample$frci)
#setwd('D:/00RCode/Result/Data Sumatera/') #---------------------- After running
#write.xlsx(cleanall, file = "FRCI_LINE10_45.22.xlsx")
#write.csv(cleanall, file = "FRCI_LINE10_45.22.csv")
## Feature Selection
svrdata <- cleanall
svrdata <- cleanall[-8]
head(svrdata)
#library(Boruta)
# Decide if a variable is important or not using Boruta
boruta_output <- Boruta(frci ~ ., data=na.omit(svrdata), doTrace=2)  # perform Boruta search
boruta_signif <- names(boruta_output$finalDecision[boruta_output$finalDecision %in% ("Confirmed")])  # collect Confirmed and Tentative variables
print(boruta_signif)  # significant variables
plot(boruta_output, cex.axis=.7, las=2, xlab="", main="Variable Importance")  # plot variable importance
set.seed(3033)
intrain <- createDataPartition(y = svrdata$frci, p= 0.7, list = FALSE)
training <- svrdata[intrain,]
testing <- svrdata[-intrain,]
dim(training)
dim(testing)
anyNA(svrdata)
## RMSE
rmse <- function(error)
{
sqrt(mean(error^2))
}
model <- svm(frci ~ . , training)
predictedY <- predict(model, testing)
error <- testing$frci - predictedY  #
svrPredictionRMSE <- rmse(error)  #
tuneResult <- tune(svm, frci ~ .,  data = training,
ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
tunedModel <- tuneResult$best.model
tunedModelY <- predict(tunedModel, testing)
error <- testing$frci - tunedModelY
tunedModelRMSE <- rmse(error)  # 2.219642
# 1. 'Actual' and 'Predicted' data
df <- data.frame(testing$frci, tunedModelY)
# 2.1. Average of actual data
avr_y_actual <- mean(df$testing.frci)
# 2.2. Total sum of squares
ss_total <- sum((df$testing.frci - avr_y_actual)^2)
# 2.3. Regression sum of squares
ss_regression <- sum((df$tunedModelY - avr_y_actual)^2)
# 2.4. Residual sum of squares
ss_residuals <- sum((df$testing.frci - df$tunedModelY)^2)
# 3. R2 Score
r2 <- 1 - ss_residuals / ss_total
setwd('D:/00RCode/Result/Data Sumatera/Data Sumatera No_Normalize/') #---------------------- After running
write.xlsx(cleanall, file = "FRCI_LINE6_57.19.xlsx")
write.csv(cleanall, file = "FRCI_LINE6_57.19.csv")
library(openxlsx)
library(readxl)
setwd('C:/Users/Felix/Dropbox/FORESTS2020/00AllData/Dataframe Cidanau/')
file1 <- read.csv('Cidanau_NN_130319.csv')
write.xlsx(file1, file = 'Cidanau_NN_130319.xlsx')
library(openxlsx)
library(readxl)
setwd('C:/Users/Felix/Dropbox/FORESTS2020/00AllData/Dataframe Cidanau/')
file1 <- read.csv('Cidanau_NN_130319.csv')
head(file1)
delColumn <- file1[-1]
delColumn <- file1[-c(1,9]
library(openxlsx)
library(readxl)
setwd('C:/Users/Felix/Dropbox/FORESTS2020/00AllData/Dataframe Cidanau/')
file1 <- read.csv('Cidanau_NN_130319.csv')
head(file1)
delColumn <- file1[-c(1,9)]
write.xlsx(file1, file = 'Cidanau_NN_130319.xlsx')
library(openxlsx)
library(readxl)
setwd('C:/Users/Felix/Dropbox/FORESTS2020/00AllData/Dataframe Cidanau/')
file1 <- read.csv('Cidanau_NN_130319.csv')
head(file1)
delColumn <- file1[-c(1,9)]
write.xlsx(delColumn, file = 'Cidanau_NN_130319.xlsx')
#---- Gabung DataFrame
library(openxlsx)
library(dplyr)
library(readxl)
setwd('D:/00RCode/Result/Data Sumatera/Data Sumatera No_Normalize/')
df1 <- read_xlsx('Cidanau_NN_130319.xlsx')
head(df1)
df2 <- read_xlsx('FRCI_LINE6_57.19.xlsx')
head(df2)
delcoll <- df2[-8]
head(delcoll)
join_df <- full_join(df1, delcoll)
View(join_df)
1069 + 580
#---- Gabung DataFrame
setwd('D:/00RCode/Result/Data Sumatera/Data Sumatera No_Normalize/')
write.xlsx(join_df, file = 'Cidanau_Join_LINE6.xlsx')
library(dbscan)
library(readxl)
library(dplyr)
library(e1071)
library(Boruta)
library(caret)
library(raster)
library(dismo)
library(openxlsx)
setwd("D:/00RCode/Result/Data Sumatera/Data Sumatera No_Normalize/")
file = read_excel("Cidanau_Join_LINE6.xlsx")
head(file)
library(dbscan)
library(readxl)
library(dplyr)
library(e1071)
library(Boruta)
library(caret)
library(raster)
library(dismo)
library(openxlsx)
setwd("D:/00RCode/Result/Data Sumatera/Data Sumatera No_Normalize/")
file1 = read_excel("Cidanau_Join_LINE6.xlsx")
head(file1)
kNNdistplot(file1, k = 5)
abline(h=0.05, col = "red", lty=2)
res <- dbscan(file1, eps =0.05 , minPts = 5)
res
pairs(file1, col = res$cluster + 1L)
file1$cluster <- res$cluster
cleanall <- file1 %>% filter(cluster > 0)
par(mfrow=c(1,2))
plot(cleanall$Band_4, cleanall$frci)
plot(file1$Band_4, file1$frci)
svrdata <- cleanall
svrdata <- cleanall[-8]
head(svrdata)
#library(Boruta)
# Decide if a variable is important or not using Boruta
boruta_output <- Boruta(frci ~ ., data=na.omit(svrdata), doTrace=2)  # perform Boruta search
boruta_signif <- names(boruta_output$finalDecision[boruta_output$finalDecision %in% ("Confirmed")])  # collect Confirmed and Tentative variables
print(boruta_signif)  # significant variables
plot(boruta_output, cex.axis=.7, las=2, xlab="", main="Variable Importance")  # plot variable importance
# Divide data to training and testing ===============================
set.seed(3033)
intrain <- createDataPartition(y = svrdata$frci, p= 0.7, list = FALSE)
training <- svrdata[intrain,]
testing <- svrdata[-intrain,]
dim(training)
dim(testing)
anyNA(svrdata)
## RMSE
rmse <- function(error)
{
sqrt(mean(error^2))
}
# svr model ==============================================
model <- svm(frci ~ . , training)
predictedY <- predict(model, testing)
error <- testing$frci - predictedY  #
svrPredictionRMSE <- rmse(error)  #
tuneResult <- tune(svm, frci ~ .,  data = training,
ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
# tuneResult <- tune(svm, frci ~ .,  data = training,
#                    ranges = list(epsilon = 0.01, cost = 10))
# print(tuneResult)
# plot(tuneResult)
tunedModel <- tuneResult$best.model
tunedModelY <- predict(tunedModel, testing)
error <- testing$frci - tunedModelY
tunedModelRMSE <- rmse(error)  # 2.219642
# 1. 'Actual' and 'Predicted' data
df <- data.frame(testing$frci, tunedModelY)
# 2. R2 Score components
# 2.1. Average of actual data
avr_y_actual <- mean(df$testing.frci)
# 2.2. Total sum of squares
ss_total <- sum((df$testing.frci - avr_y_actual)^2)
# 2.3. Regression sum of squares
ss_regression <- sum((df$tunedModelY - avr_y_actual)^2)
# 2.4. Residual sum of squares
ss_residuals <- sum((df$testing.frci - df$tunedModelY)^2)
# 3. R2 Score
r2 <- 1 - ss_residuals / ss_total
setwd('D:/00RCode/Result/Data Sumatera/Data Sumatera No_Normalize/') #---------------------- After running
write.xlsx(cleanall, file = "Cidanau_Join_LINE6_61.18.xlsx")
library(openxlsx)
library(dplyr)
library(readxl)
setwd('C:/Users/Felix/Dropbox/FORESTS2020/00AllData/Dataframe Cidanau/')
file1 <- read.csv('Cidanau_NN_130319.csv')
head(file1)
delColumn <- file1[-c(1,9)]
write.xlsx(delColumn, file = 'Cidanau_NN_130319.xlsx')
plot(file1$Band_4, file1$frci)
setwd('D:/00RCode/Result/Data Sumatera/Data Sumatera No_Normalize/')
df1 <- read_xlsx('Cidanau_NN_130319.xlsx')
head(df1)
df2 <- read_xlsx('FRCI_LINE6_57.19.xlsx')
delcoll <- df2[-8]
head(delcoll)
plot(df1$Band_4, df1$frci)
plot(df2$Band_4, df2$frci)
join_df <- full_join(df1, delcoll)
View(join_df)
plot(join_df$Band_4, join_df$frci)
library(dbscan)
library(readxl)
library(dplyr)
library(e1071)
library(Boruta)
library(caret)
library(raster)
library(dismo)
library(openxlsx)
setwd("D:/00RCode/Result/Data Sumatera/Data Sumatera No_Normalize/")
file1 = read_excel("Cidanau_Join_LINE6.xlsx")
head(file1)
kNNdistplot(file1, k = 5)
abline(h=0.05, col = "red", lty=2)
abline(h=0.04, col = "red", lty=2)
abline(h=0.045, col = "red", lty=2)
res <- dbscan(file1, eps =0.045 , minPts = 5)
res
pairs(file1, col = res$cluster + 1L)
file1$cluster <- res$cluster
cleanall <- file1 %>% filter(cluster > 0)
par(mfrow=c(1,2))
plot(cleanall$Band_4, cleanall$frci)
plot(file1$Band_4, file1$frci)
svrdata <- cleanall
svrdata <- cleanall[-8]
head(svrdata)
#library(Boruta)
# Decide if a variable is important or not using Boruta
boruta_output <- Boruta(frci ~ ., data=na.omit(svrdata), doTrace=2)  # perform Boruta search
boruta_signif <- names(boruta_output$finalDecision[boruta_output$finalDecision %in% ("Confirmed")])  # collect Confirmed and Tentative variables
print(boruta_signif)  # significant variables
plot(boruta_output, cex.axis=.7, las=2, xlab="", main="Variable Importance")  # plot variable importance
set.seed(3033)
intrain <- createDataPartition(y = svrdata$frci, p= 0.7, list = FALSE)
training <- svrdata[intrain,]
testing <- svrdata[-intrain,]
dim(training)
dim(testing)
anyNA(svrdata)
## RMSE
rmse <- function(error)
{
sqrt(mean(error^2))
}
model <- svm(frci ~ . , training)
predictedY <- predict(model, testing)
error <- testing$frci - predictedY  #
svrPredictionRMSE <- rmse(error)  #
tuneResult <- tune(svm, frci ~ .,  data = training,
ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
tunedModel <- tuneResult$best.model
tunedModelY <- predict(tunedModel, testing)
error <- testing$frci - tunedModelY
tunedModelRMSE <- rmse(error)  # 2.219642
# 1. 'Actual' and 'Predicted' data
df <- data.frame(testing$frci, tunedModelY)
# 2.1. Average of actual data
avr_y_actual <- mean(df$testing.frci)
# 2.2. Total sum of squares
ss_total <- sum((df$testing.frci - avr_y_actual)^2)
# 2.3. Regression sum of squares
ss_regression <- sum((df$tunedModelY - avr_y_actual)^2)
# 2.4. Residual sum of squares
ss_residuals <- sum((df$testing.frci - df$tunedModelY)^2)
# 3. R2 Score
r2 <- 1 - ss_residuals / ss_total
library(openxlsx)
library(dplyr)
library(readxl)
setwd('D:/00RCode/Result/Data Sumatera/Data Sumatera No_Normalize/')
df1 <- read_xlsx('Cidanau_NN_130319.xlsx')
head(df1)
df2 <- read_xlsx('FRCI_LINE6_57.19.xlsx')
delcoll <- df2[-8]
head(delcoll)
plot(df1$Band_4, df1$frci)
plot(df2$Band_4, df2$frci)
join_df <- full_join(df1, delcoll)
plot(join_df$Band_4, join_df$frci)
