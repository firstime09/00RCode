install.packages(xlsReadWrite)
require(xlsReadWrite)
install.packages("readxl")
library(readxl)
df <- read_excel("C:/Users/Felix/Dropbox/MyDocument/Data Nitrogen - Lexi Pendong")
df <- read_excel("C:/Users/Felix/Dropbox/MyDocument/Data Nitrogen - Lexi Pendong.xlsx")
df
library(readxl)
df <- read_excel("C:/Users/Felix/Dropbox/MyDocument/Data Nitrogen - Lexi Pendong.xlsx")
plot(df)
install.packages("pls")
?pls
help(pls)
??pls
library(readxl)
library(pls)
df <- read_excel("C:/Users/Felix/Dropbox/MyDocument/Data Nitrogen - Lexi Pendong.xlsx")
summary(df)
head(df)
library(readxl)
library(pls)
df <- read_excel("C:/Users/Felix/Dropbox/MyDocument/Data Nitrogen - Lexi Pendong.xlsx")
summary(df)
install.packages("plspm")
plot(df)
library(readxl)
dframe <- read_excel('C:/Users/Felix/Dropbox/FORESTS2020/00AllData/Data_1048_Yoga.xlsx')
print(dframe)
install.packages(xlsx)
install.packages("xlsx")
install.packages("xlsx")
library(xlsx)
library('xlsx')
library("xlsx")
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
install.packages("dbscan")
las7<-readLAS("F:/Clip LIDAR/r01_2.laz")
install.packages(lidR)
library(rgdal)
library(raster)
library(rgeos)
library(dplyr)
library(EBImage)
install.packages("lidR","raster",")
> install.packages("lidR","raster")
> install.packages("lidR")
install.packages("lidR")
install.packages("lidR")
#import required libraries
library(raster)
library(rgdal)
#import required libraries
library(raster)
library(rgdal)
#generate a list of input rasters ("grids")
#pattern = "*.tif$" - filters for main raster files only and skips any associated files (e.g. world files)
grids <- list.files("D:/TIFF DATA/SUMATERA" , pattern = "*.tif$")
#create a raster stack from the input raster files
s <- raster::stack(paste0("D:/TIFF DATA/SUMATERA", grids))
#create a raster stack from the input raster files
s <- raster::stack(paste0(".D:/TIFF DATA/SUMATERA", grids))
#create a raster stack from the input raster files
s <- raster::stack(paste0("D:/TIFF DATA/SUMATERA/Out", grids))
s <- stack(grids)
library(dbscan) ## Algoritma untuk pengelompokan
library(readxl) ## Membaca data excel
library(dplyr) ## Data manipulation
library(e1071) ## Algoritma machine learning
library(Boruta) ## Feature selection
library(caret) ## For data spliting
library(raster) ## For data spatial
library(dismo) ##
setwd('D:/00RCode/Result/Data Sumatera/Data Sumatera No_Normalize/')
load_data <- read_xlsx('Cidanau_Join_LINE6_61.18_%DATA.xlsx')
head(load_data)
plot(load_data$`B4_%`,load_data$`frci_%`)
library(dbscan) ## Algoritma untuk pengelompokan
library(readxl) ## Membaca data excel
library(dplyr) ## Data manipulation
library(e1071) ## Algoritma machine learning
library(Boruta) ## Feature selection
library(caret) ## For data spliting
library(raster) ## For data spatial
library(dismo) ##
setwd('D:/00RCode/Result/Data Sumatera/Data Sumatera No_Normalize/')
load_data <- read_xlsx('Cidanau_Join_LINE6_61.18_%DATA.xlsx')
head(load_data)
summary(load_data)
new_data <- load_data[,c(1,10,11,12,13,14,15)]
head(new_data)
lst <- as.data.frame(lapply(sample, function(x) round(x, 0)))
lst <- as.data.frame(lapply(new_data, function(x) round(x, 0)))
head(lst)
setwd("D:/00RCode/Result/Data Sumatera/Data Sumatera No_Normalize/") #---------------------- After running
write.xlsx(lst, file = "New_CIDANAU_LINE_6_DN_12092019.xlsx")
library(openxlsx) ## For open data excel
write.xlsx(lst, file = "New_CIDANAU_LINE_6_DN_12092019.xlsx")
# 1. Mendownload beberapa package yang dibutuhkan dalam mengolah data ----
install.packages(c("sf", "tidyverse", "lidR", "raster", "magrittr"))
install.packages(c("sf", "tidyverse", "lidR", "raster", "magrittr"))
# 2. Panggil beberapa package yang akan digunakan ----
library(tidyverse)
# tidyverse -> packages ggplot2,dplyr,purrr,tibble,tidyr,readr,stringr,forcats
library(lidR)
library(raster)
library(magrittr)
library(sf)
# 4. load the data ----
ROI122 <- readLAS "H:/Wildfire_datasets/PROCESSING/CLASSIFICATION/ROI122_CLASS.las")
# 4. load the data ----
ROI122 <- readLAS ("H:/Wildfire_datasets/PROCESSING/CLASSIFICATION/ROI122_CLASS.las")
# 7. Mengecek kualitas data las ----
lascheck(ROI122)
table(ROI122@data$Classification)
View(new_data)
View(ROI122)
# 4. load the data ----
ROI122 <- readLAS ("H:/Wildfire_datasets/PROCESSING/CLASSIFICATION/ROI122_CLASS.las")
# Pengurangan Kerapatan point clouds dengan menggunakan beberapa algoritma ----
#ROI41_dec <- lasfilterdecimate(ROI41,
#algorithm = homogenize(density = 3L, res = 1))
#las.clip
#las.thin
#lascheck(ROI41_dec)
# Filtering point clouds yang double XYZ
ROI122_dup <- lasfilterduplicates(ROI122)
ROI122_data<- lasfilter(ROI122_dup, !duplicated(ROI122_dup@data, by = c("X", "Y")))
lascheck(ROI122_data)
# Digital terrain Model (DTM)
dtm <- grid_terrain(ROI122_data, algorithm = kriging(k=10L), res = 0.5)
install.packages("gstat")
library(gstat)
# Digital terrain Model (DTM)
dtm <- grid_terrain(ROI122_data, algorithm = kriging(k=10L), res = 0.5)
writeRaster(dtm, "H:/Wildfire_datasets/PROCESSING/DTM/ROI122_dtm.tif", overwrite=TRUE)
# Normalized Digital surface Model (nDSM)
# Percobaan pertama
ROI122_nor <- lasnormalize(ROI122_data, dtm)
summary(ROI122_nor@data$Z)
#rdsm0 <- grid_canopy(nlas, res = 0.5, p2r())
hgtcol <- height.colors(40)
plot(dtm, hgtcol)
summary(ROI122_nor@data$Z)
# Percobaan Kedua memfilter elevasi dibawah 0
ROI122_0 <- lasfilter(ROI122_nor, Z >= 0 & Z <=50)
#ndsm <- grid_canopy(nlas2, res = 0.5, p2r())
#plot(ndsm, col=hgtcol)
ROI122_0
# Canopy Hight Model (CHM)
clas <- lasfilter(ROI122_0)
cdsm <- grid_canopy(clas, res = 0.5, p2r(subcircle = 0.2, na.fill = tin ()))
