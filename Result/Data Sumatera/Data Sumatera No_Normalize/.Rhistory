install.packages("e1071")
library(e1071)
dataTest <- read.csv("D:\\Documents\\DTest15112018.csv")
dim(dataTest)
dim(dataTest)
dataTest <- read.csv("D:\\Documents\\DTest15112018.csv")
dim(dataTest)
library(e1071)
dataTest <- read.csv("D:\\Documents\\DTest15112018.csv")
dim(dataTest)
summary(dataTest)
describe(dataTest)
install.packages("psych")
describe(dataTest)
library(e1071)
library(psych)
dataTest <- read.csv("D:\\Documents\\DTest15112018.csv")
dim(dataTest)
summary(dataTest)
pri(dataTest)
print(dataTest)
print(x)
a <- 7+2
print(a)
b = 7+2
print(b)
x <- 3+2
print(x)
x <- 3+2
print(x)
??knn
??ceret
??mlblench
library(openxlsx)
library(readxl)
##----------- 20/03-2019 Load Data LINE 6 dan 7
setwd('E:/All Data Forests2020/26032019_Pavilion/FRCI_6_7') """Load Data From SSD WD"""
##----------- 20/03-2019 Load Data LINE 6 dan 7
setwd('E:/All Data Forests2020/26032019_Pavilion/FRCI_6_7') ## """Load Data From SSD WD"""
dataFrame <- read.xlsx('Data_LINE_6_7_SUMATERA.xlsx')
table(dataFrame$Class)
head(dataFrame)
library(dbscan)
library(readxl)
library(dplyr)
library(e1071)
library(Boruta)
library(caret)
library(raster)
library(dismo)
library(openxlsx)
library(dbscan)
library(readxl)
library(dplyr)
library(e1071)
library(Boruta)
library(caret)
library(raster)
library(dismo)
library(openxlsx)
##----------- 20/03-2019 Load Data LINE 6 dan 7
setwd('E:/All Data Forests2020/26032019_Pavilion/FRCI_6_7') ## """Load Data From SSD WD"""
dataFrame <- read.xlsx('Data_LINE_6_7_SUMATERA.xlsx')
head(dataFrame)
dataFrame <- dataFrame[-2]
head(dataFrame)
round_data <- as.data.frame(lapply(dataFrame, function(x), round(x, 3)))
round_data <- as.data.frame(lapply(dataFrame, function(x) round(x, 3)))
head(round_data)
dframe <- round_data
kNNdistplot(dframe, k = 5)
abline(h = 0.045, col = 'red', lty = 2)
# """Note make line before increase data"""
abline(h = 0.04, col = 'red', lty = 2)
dbSCAN_Out <- dbscan(dframe, eps = 0.04, minPts = 5)
dbSCAN_Out
pairs(dframe, col = dbSCAN_Out$cluster + 1L)
dframe$cluster <- dbSCAN_Out$cluster
clean_dframe <- dframe %>% filter(cluster > 0)
par(mfrow = c(1,2))
plot(clean_dframe$Band_4, clean_dframe$frci)
plot(dframe$Band_4, dframe$frci)
# """Make SVR Model from clean_dframe"""
head(clean_dframe)
svrdata <- clean_dframe
svrdata <- clean_dframe[-8]
boruta_output <- Boruta(frci ~ ., data = na.omit(svrdata), doTrace = 2)  # perform Boruta search
boruta_signif <- names(boruta_output$finalDecision[boruta_output$finalDecision %in% ("Confirmed")])  # collect Confirmed and Tentative variables
print(boruta_signif)  # significant variables
plot(boruta_output, cex.axis=.7, las=2, xlab="", main="Variable Importance")  # plot variable importance
# """Divide data for testing and training data"""
set.seed(3033)
intrain <- createDataPartition(y = svrdata$frci, p= 0.7, list = FALSE)
training <- svrdata[intrain,]
testing <- svrdata[-intrain,]
dim(training)
dim(testing)
anyNA(svrdata)
rmse <- function(error)
{
sqrt(mean(error^2))
}
model <- svm(frci ~ . , training)
predictedY <- predict(model, testing)
error <- testing$frci - predictedY
svrPredictionRMSE <- rmse(error)
tuneResult <- tune(svm, frci ~ .,  data = training,
ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
# """Tune Model from SVR result"""
tunedModel <- tuneResult$best.model
tunedModelY <- predict(tunedModel, testing)
error <- testing$frci - tunedModelY
tunedModelRMSE <- rmse(error)
# 1. 'Actual' and 'Predicted' data
df <- data.frame(testing$frci, tunedModelY)
# 2. R2 Score components
# 2.1. Average of actual data
avr_y_actual <- mean(df$testing.frci)
# 2.2. Total sum of squares
ss_total <- sum((df$testing.frci - avr_y_actual)^2)
# 2.3. Regression sum of squares
ss_regression <- sum((df$tunedModelY - avr_y_actual)^2)
# 2.4. Residual sum of squares
ss_residuals <- sum((df$testing.frci - df$tunedModelY)^2)
# 3. R2 Score
r2 <- 1 - ss_residuals / ss_total
setwd('D:/00RCode/Result/Data Sumatera/Data Sumatera No_Normalize/') #---------------------- After running
write.xlsx(clean_dframe, file = "FRCI_LINE6_7_75.14.xlsx")
write.csv(clean_dframe, file = "FRCI_LINE6_7_75.14.csv")
library(openxlsx)
library(dplyr)
library(readxl)
#---- Gabung DataFrame
setwd('D:/00RCode/Result/Data Sumatera/Data Sumatera No_Normalize/')
df1 <- read_xlsx('Cidanau_NN_130319.xlsx')
head(df1)
df2 <- read_xlsx('FRCI_LINE6_7_75.14.xlsx')
head(df2)
delcoll <- df2[-8]
head(delcoll)
join_df <- full_join(df1, delcoll)
View(join_df)
write.xlsx(join_df, file = 'Cidanau_LINE_6_7_NEW.xlsx')
library(dbscan)
library(readxl)
library(dplyr)
library(e1071)
library(Boruta)
library(caret)
library(raster)
library(dismo)
library(openxlsx)
setwd("D:/00RCode/Result/Data Sumatera/Data Sumatera No_Normalize/")
file1 = read_excel("Cidanau_LINE_6_7_NEW.xlsx")
head(file1)
kNNdistplot(file1, k = 5)
abline(h=0.03, col = "red", lty=2)
abline(h=0.04, col = "red", lty=2)
abline(h=0.045, col = "red", lty=2)
res <- dbscan(file1, eps =0.045, minPts = 5)
res
abline(h=0.04, col = "red", lty=2)
res <- dbscan(file1, eps =0.04, minPts = 5)
res
pairs(file1, col = res$cluster + 1L)
file1$cluster <- res$cluster
cleanall <- file1 %>% filter(cluster > 0)
par(mfrow=c(1,2))
plot(cleanall$Band_4, cleanall$frci)
plot(file1$Band_4, file1$frci)
svrdata <- cleanall
svrdata <- cleanall[-8]
head(svrdata)
# Decide if a variable is important or not using Boruta
boruta_output <- Boruta(frci ~ ., data=na.omit(svrdata), doTrace=2)  # perform Boruta search
boruta_signif <- names(boruta_output$finalDecision[boruta_output$finalDecision %in% ("Confirmed")])  # collect Confirmed and Tentative variables
print(boruta_signif)  # significant variables
plot(boruta_output, cex.axis=.7, las=2, xlab="", main="Variable Importance")  # plot variable importance
# Divide data to training and testing ===============================
set.seed(3033)
intrain <- createDataPartition(y = svrdata$frci, p= 0.7, list = FALSE)
training <- svrdata[intrain,]
testing <- svrdata[-intrain,]
dim(training)
dim(testing)
anyNA(svrdata)
## RMSE
rmse <- function(error)
{
sqrt(mean(error^2))
}
# svr model ==============================================
model <- svm(frci ~ . , training)
predictedY <- predict(model, testing)
error <- testing$frci - predictedY  #
svrPredictionRMSE <- rmse(error)  #
tuneResult <- tune(svm, frci ~ .,  data = training,
ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
tunedModel <- tuneResult$best.model
tunedModelY <- predict(tunedModel, testing)
error <- testing$frci - tunedModelY
tunedModelRMSE <- rmse(error)
# 1. 'Actual' and 'Predicted' data
df <- data.frame(testing$frci, tunedModelY)
# 2. R2 Score components
# 2.1. Average of actual data
avr_y_actual <- mean(df$testing.frci)
# 2.2. Total sum of squares
ss_total <- sum((df$testing.frci - avr_y_actual)^2)
# 2.3. Regression sum of squares
ss_regression <- sum((df$tunedModelY - avr_y_actual)^2)
# 2.4. Residual sum of squares
ss_residuals <- sum((df$testing.frci - df$tunedModelY)^2)
# 3. R2 Score
r2 <- 1 - ss_residuals / ss_total
setwd('D:/00RCode/Result/Data Sumatera/Data Sumatera No_Normalize/') #---------------------- After running
write.xlsx(cleanall, file = "Cidanau_LINE_6_7_NEW_74.15.xlsx")
write.csv(cleanall, file = "Cidanau_LINE_6_7_NEW_74.15.csv")
