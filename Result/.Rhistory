install.packages("e1071")
library(e1071)
dataTest <- read.csv("D:\\Documents\\DTest15112018.csv")
dim(dataTest)
dim(dataTest)
dataTest <- read.csv("D:\\Documents\\DTest15112018.csv")
dim(dataTest)
library(e1071)
dataTest <- read.csv("D:\\Documents\\DTest15112018.csv")
dim(dataTest)
summary(dataTest)
describe(dataTest)
install.packages("psych")
describe(dataTest)
library(e1071)
library(psych)
dataTest <- read.csv("D:\\Documents\\DTest15112018.csv")
dim(dataTest)
summary(dataTest)
pri(dataTest)
print(dataTest)
print(x)
a <- 7+2
print(a)
b = 7+2
print(b)
x <- 3+2
print(x)
x <- 3+2
print(x)
library(rgdal)
library(rgeos)
library(yaml)
library(EBImage)
# load the data ----
library(magrittr)
library(lidR)
setwd('D:/00RCode/Data/')
lidline2_44 <- readLAS ("LINE_1_1.las")
plot(lidline2_44)
##
dtm2_44 <- grid_terrain(lidline2_44, res = 0.5, algorithm = kriging(k = 10L))
plot(dtm2_44)
#lasnorm2_44 <- lasnormalize(lidline2_44, dtm2_44, copy = TRUE)
lasnorm2_44 <- lasnormalize(lidline2_44, dtm2_44, na.rm = TRUE)
plot(lasnorm2_44)
# check Z ----
# :: N rows / observations ----
nrow(lasnorm2_44@data)
# :: histogram ----
hist(lasnorm2_44@data$Z)
# :: min/max, summary ----
min(lasnorm2_44@data$Z)
max(lasnorm2_44@data$Z)
summary(lasnorm2_44@data$Z)
# :: N obs close to extremes ----
# to know whether the significance
library(dplyr)
filter(lasnorm2_44@data, Z < 0) %>% nrow
filter(lasnorm2_44@data, Z > 50) %>% nrow
# trim 0 < Z < extremely high ----
lidline2_44_trim <- lasfilter(lasnorm2_44, Z >= 0 & Z < 50)
# check Clasification ----
# to see whether there is an "abnormal class" in the ROI
unique(lidline2_44_trim@data$Classification)
table(lidline2_44_trim@data$Classification)
## filter classification <- tidak dikerjakan
lidline5_1_filtclas <- lasfilter(lidline5_1_trim, Classification > 2)
## filter classification <- tidak dikerjakan
lidline5_1_filtclas <- lasfilter(lidline2_44_trim, Classification > 2)
unique(lidline5_1_filtclas@data$Classification)
table(lidline5_1_filtclas@data$Classification)
# make ID ----
lidline2_44_trim@data$ID <- 1:nrow(lidline2_44_trim@data)
names(lidline2_44_trim@data)
# save data .rds
setwd('D:/00RCode/Result')
saveRDS(lidline2_44_trim, "fn_line2.44.RDS")
??grid_canopy
## Membuat CHM dan Smoothing
chm2_44 <- grid_canopy(lidline2_44_trim, res = 0.5, subcircle = 0.3, na.fill = "knnidw", k=5, p=2)
## Membuat CHM dan Smoothing
#chm2_44 <- grid_canopy(lidline2_44_trim, res = 0.5, subcircle = 0.3, na.fill = "knnidw", k=5, p=2)
chm2_44 <- grid_canopy(lidline2_44_trim, res = 0.5, subcircle = 0.3, algorithm = "knnidw", k=5, p=2)
## Membuat CHM dan Smoothing
#chm2_44 <- grid_canopy(lidline2_44_trim, res = 0.5, subcircle = 0.3, na.fill = "knnidw", k=5, p=2)
chm2_44 <- grid_canopy(lidline2_44_trim, res = 0.5, subcircle = 0.3, algorithm = knnidw(k=6L, p=2))
??grid_canopy
## Membuat CHM dan Smoothing
#chm2_44 <- grid_canopy(lidline2_44_trim, res = 0.5, subcircle = 0.3, na.fill = "knnidw", k=5, p=2)
chm2_44 <- grid_canopy(lidline2_44_trim, res = 0.5, algorithm = knnidw(k=5, p=2))
## Membuat CHM dan Smoothing
#chm2_44 <- grid_canopy(lidline2_44_trim, res = 0.5, subcircle = 0.3, na.fill = "knnidw", k=5, p=2)
chm2_44 <- grid_canopy(lidline2_44_trim, 0.5, knnidw(k=5, p=2))
## Membuat CHM dan Smoothing
#chm2_44 <- grid_canopy(lidline2_44_trim, res = 0.5, subcircle = 0.3, na.fill = "knnidw", k=5, p=2)
chm2_44 <- grid_canopy(lidline2_44_trim, res = 0.5, p2r(subcircle = 0.3, na.fill = knnidw(k=5, p=2)))
plot(chm2_44)
rchm <- as.raster(chm2_44)
## Membuat raster CHM
library(raster)
writeRaster(rchm, filename = "chm_line2.44.tif")
??writeRaster
??grid_canopy
View(rchm)
print(rchm)
ras <- writeRaster(rchm, filename = "chm_line2.44.tif", format = "GTiff")
ras <- writeRaster(rchm, filename = "chm_line2.44.tif", format = "GTiff", overwrite = TRUE)
## Membuat raster CHM
library(raster)
ras <- writeRaster(rchm, filename = "chm_line2.44.tif", format = "GTiff", overwrite = TRUE)
df <- data.frame(rchm)
df <- data.frame(rchm, row.names = NULL)
df <- as.data.frame(rchm, row.names = NULL)
rchm1 <- as.raster(chm2_44, na.rm = TRUE) # Fix 20-02-2019
df <- as.data.frame(rchm1, na.rm = TRUE)
df <- as.data.frame(rchm1, xy=TRUE)
df <- as.data.frame(as.matrix(rchm1))
head(df)
df <- as.data.frame(as.matrix(rchm1), na.rm=TRUE)
a <- na.omit(df)
head(a)
if (require(rgdal)){
ras <- writeRaster(rchm, filename = "chm_line2.44.tif", format = "GTiff", overwrite = TRUE)
}
if (require(rgdal)){
ras <- writeRaster(rchm, filename = "chm_line2.44.tif", format = "GTiff", overwrite = TRUE)
}
ras <- writeRaster(rchm, filename = "chm_line2.44.tif", format = "GTiff", overwrite = FALSE)
ras <- writeRaster(rchm, filename = "chm_line2.44.tif", format = "GTiff", overwrite = NAflag)
ras <- writeRaster(rchm, filename = "chm_line2.44.tif", format = "GTiff", overwrite = TRUE, NAflag)
writeRaster(x, ix.tif)
ras1 <- writeRaster(rchm, filename = "test.tif")
?writeRaster
class(rchm)
rchm <- as.raster(chm2_44) # Fix 20-02-2019
ras1 <- writeRaster(rchm, filename = "test.tif")
rchm
plot9rchm
plot(rchm)
summary(rchm)
rchm@
class(rchm)
as.raster
rchm <- raster::as.raster(chm2_44) # Fix 20-02-2019
ras1 <- writeRaster(rchm, filename = "test.tif")
class(rchm)
?as.raster
head(chm2_44)
class(chm2_44)
ras1 <- writeRaster(chm2_44, filename = "test.tif")
library(rgdal)
library(rgeos)
library(yaml)
library(dplyr)
library(raster)
library(magrittr)
library(lidR)
setwd('D:/00RCode/Data/')
lidRline <- readLAS("LINE_1_1.las")
plot(lidRline)
plot(lidRline)
dtm2_44 <- grid_terrain(lidline2_44, res = 0.5, algorithm = kriging(k = 10L))
lasnorm2_44 <- lasnormalize(lidline2_44, dtm2_44, na.rm = TRUE)
plot(dtm2_44)
plot(lasnorm2_44)
##------------------------- DTM and Normalization
dtmfile <- grid_terrain(lidRline, res = 0.5, algorithm = kriging(k = 10L))
lasnormfile <- lasnormalize(lidRline, dtm2_44, na.rm = TRUE)
lasnormfile <- lasnormalize(lidRline, dtmfile, na.rm = TRUE)
plot(dtmfile)
plot(lasnormfile)
##------------------------- check Z ----
##------------------------- :: N rows / observations ----
nrow(lasnormfile@data)
##------------------------- :: histogram ----
hist(lasnormfile@data$Z)
##------------------------- :: min/max, summary ----
min(lasnormfile@data$Z)
max(lasnormfile@data$Z)
summary(lasnormfile@data$Z)
# :: N obs close to extremes ----
# to know whether the significance
filter(lasnormfile@data, Z < 0) %>% nrow
filter(lasnormfile@data, Z > 50) %>% nrow
##------------------------- trim 0 < Z < extremely high ----
lidRline <- lasfilter(lasnormfile, Z >= 0 & Z < 50)
##------------------------- check Clasification ----
##------------------------- to see whether there is an "abnormal class" in the ROI
unique(lidRline@data$Classification)
table(lidRline@data$Classification)
##------------------------- make ID ----
lidRline@data$ID <- 1:nrow(lidRline@data)
names(lidRline@data)
##------------------------- save data .rds
setwd('D:/00RCode/Result')
saveRDS(lidRline, "fn_line1_New.RDS") #---------------------------------- Fix 20-02-2019
##------------------------- Make CHM and Smoothing with lidRline Data -------------------------
chmfile <- grid_canopy(lidRline, res = 0.5, p2r(subcircle = 0.3, na.fill = knnidw(k=5, p=2)))
plot(chmfile)
ras2chm <- writeRaster(chmfile, filename = "chm_fn_line1_New.tif") #-------- Make raster CHM
##---------------------------- LiDAR metric ----------------------------
metrik_arci <- function(rn, nr, cls, z, h) # first return canopy index
{
ar <- (rn > 0 & z >= 0) # all return disregard the class
vg <- (cls >= 3) & (cls <= 5)
hx <- (z >= h)
ac <- (vg & hx)
arci <- sum(ac) / sum(ar)
return(list(arci = arci))
}
metrik_frci <- function(rn, nr, cls, Z, h)
{
fr <- (rn == 1 & Z >= 0)
sr <- (nr == 1 & Z >= 0)
hx <- (Z >= h)
ac <- (cls >= 3 & cls <= 5)
fc_tree <- (fr & hx & ac)
sc_tree <- (sr & hx & ac)
frci <- (sum(fc_tree) + sum(sc_tree)) / (sum(fr) + sum(sr))
return(list(frci = frci))
}
library(sf)
